Traceback (most recent call last):
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""On r√©alise maintenant l'ajustement lin√©aire pour chaque groupe d'√©chantillons simul√©s."""
nRTs = []  # On va stocker les pentes
ordo = []  # On av stocker les ordonn√©es √† l'origine
for i in range(N):
	invV = [x[i] for x in invVs]  # On utilise la compr√©hension de liste pour s√©lectionner le i√®me √©l√©ment pour chaque volume.
	P = [x[i] for x in Ps]  # On utilise la compr√©hension de liste pour s√©lectionner le i√®me √©l√©ment pour chaque pression.
	par = np.polyfit(invV, P, 1)  # R√©gression lin√©aire
	nRTs.append(par[0])  # Stockage de la pente
	ordo.append(par[1])  # Stockage de l'ordonn√©e √† l'origine

"""Calcul de la moyenne et √©cart-type"""
nRT_moy = np.mean(nRTs)  # Moyenne (Estimation de nRT)
nRT_inc = np.std(nRTs, ddof=1)  # Ecart-type (Estimation de l'incertitude sur nRT)
ordo_moy = np.mean(ordo)
ordo_inc = np.std(ordo, ddof=1)

print("L'ordonn√©e √† l'origine est {:.1f} +/- {:.1f} hPa".format(ordo_moy, ordo_inc))

P_adj = nRT_moy * np.array(invV_moy) + ordo_moy  # Estimation des valeurs ajust√©s pour le trac√©
"""Remarque : On doit transformer invV_moy en un vecteur numpy pour appliquer une op√©ration √† chaque √©l√©ment."""
en = (P_moy - P_adj) / P_inc  # Ecarts normalis√©s

"""Trac√© de P=f(1/V)"""
f, ax = plt.subplots(1, 2)  # On trace deux graphiques : P(1/V) avec le mod√®le ajust√© et les √©carts normalis√©s
f.suptitle("Test de la loi de Mariotte")
ax[0].set_xlabel("1/V (mL^-1)")
ax[0].set_ylabel("P(hPa)")

ax[0].errorbar(invV_moy, P_moy, xerr=invV_inc, yerr=P_inc, label="P(1/V)", marker='+', linestyle='', color='red') # Trac√© sans relier les points
ax[0].plot(invV_moy, P_adj, label="Ajustement", linestyle=':', color='blue') # Trac√© sans relier les points
ax[0].legend()

ax[1].plot(invV_moy, en, label="EN", marker="+", linestyle='')
ax[1].legend()
plt.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-4-7d8454ea0a26>[0m in [0;36m<module>[0;34m[0m
[1;32m      5[0m         [0minvV[0m [0;34m=[0m [0;34m[[0m[0mx[0m[0;34m[[0m[0mi[0m[0;34m][0m [0;32mfor[0m [0mx[0m [0;32min[0m [0minvVs[0m[0;34m][0m  [0;31m# On utilise la compr√©hension de liste pour s√©lectionner le i√®me √©l√©ment pour chaque volume.[0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m         [0mP[0m [0;34m=[0m [0;34m[[0m[0mx[0m[0;34m[[0m[0mi[0m[0;34m][0m [0;32mfor[0m [0mx[0m [0;32min[0m [0mPs[0m[0;34m][0m  [0;31m# On utilise la compr√©hension de liste pour s√©lectionner le i√®me √©l√©ment pour chaque pression.[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m         [0mpar[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mpolyfit[0m[0;34m([0m[0minvV[0m[0;34m,[0m [0mP[0m[0;34m,[0m [0;36m1[0m[0;34m)[0m  [0;31m# R√©gression lin√©aire[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      8[0m         [0mnRTs[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mpar[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m)[0m  [0;31m# Stockage de la pente[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m         [0mordo[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mpar[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m)[0m  [0;31m# Stockage de l'ordonn√©e √† l'origine[0m[0;34m[0m[0;34m[0m[0m

[0;32m<__array_function__ internals>[0m in [0;36mpolyfit[0;34m(*args, **kwargs)[0m

[0;32m~/miniconda3/envs/jupybook/lib/python3.9/site-packages/numpy/lib/polynomial.py[0m in [0;36mpolyfit[0;34m(x, y, deg, rcond, full, w, cov)[0m
[1;32m    601[0m         [0;32mraise[0m [0mTypeError[0m[0;34m([0m[0;34m"expected 1D or 2D array for y"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    602[0m     [0;32mif[0m [0mx[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m [0;34m!=[0m [0my[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 603[0;31m         [0;32mraise[0m [0mTypeError[0m[0;34m([0m[0;34m"expected x and y to have same length"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    604[0m [0;34m[0m[0m
[1;32m    605[0m     [0;31m# set rcond[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mTypeError[0m: expected x and y to have same length
TypeError: expected x and y to have same length

